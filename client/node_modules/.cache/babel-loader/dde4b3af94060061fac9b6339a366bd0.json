{"ast":null,"code":"import _Object$keys from 'babel-runtime/core-js/object/keys';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid/v4';\nimport isFunction from 'lodash-es/isFunction';\nimport isEqual from 'lodash-es/isEqual';\nimport attempt from 'lodash-es/attempt';\nimport isImmutable from 'is-immutable';\nimport immutableEqual from 'immutable-is';\nimport { Provider } from '../SeriesContext';\nimport addEventProps, { getNonEventHandlerProps } from '../../utils/events';\nimport getModifiedProps from '../../utils/getModifiedProps';\nimport { logSeriesErrorMessage } from '../../utils/warnings';\n\nvar Series = function (_Component) {\n  _inherits(Series, _Component);\n\n  function Series(props) {\n    _classCallCheck(this, Series);\n\n    var _this = _possibleConstructorReturn(this, (Series.__proto__ || _Object$getPrototypeOf(Series)).call(this, props));\n\n    _this.getSeriesConfig = function () {\n      var _this$props = _this.props,\n          id = _this$props.id,\n          data = _this$props.data,\n          requiresAxis = _this$props.requiresAxis,\n          getAxis = _this$props.getAxis,\n          children = _this$props.children,\n          rest = _objectWithoutProperties(_this$props, ['id', 'data', 'requiresAxis', 'getAxis', 'children']);\n\n      var seriesId = isFunction(id) ? id() : id;\n      var seriesData = isImmutable(data) ? data.toJS() : data;\n      var nonEventProps = getNonEventHandlerProps(rest);\n\n      var config = _extends({\n        id: seriesId,\n        data: seriesData\n      }, nonEventProps);\n\n      if (requiresAxis) {\n        var axis = getAxis();\n        config[axis.type] = axis.id;\n      }\n\n      return config;\n    };\n\n    if (process.env.NODE_ENV === 'development') {\n      var type = props.type,\n          getHighcharts = props.getHighcharts;\n\n      var seriesTypes = _Object$keys(getHighcharts().seriesTypes);\n\n      if (seriesTypes.indexOf(type) === -1) logSeriesErrorMessage(type);\n    }\n\n    return _this;\n  }\n\n  _createClass(Series, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var chart = this.props.getChart(); // Create Highcharts Series\n\n      var opts = this.getSeriesConfig();\n      this.series = chart.addSeries(opts, true);\n      var update = this.series.update.bind(this.series);\n      addEventProps(update, this.props); // Re-render to pass this.series to Provider\n\n      this.forceUpdate();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          visible = _props.visible,\n          data = _props.data,\n          rest = _objectWithoutProperties(_props, ['visible', 'data']); // Using setData is more performant than update\n\n\n      if (isImmutable(data) && immutableEqual(data, prevProps.data) === false) {\n        this.series.setData(data.toJS(), true);\n      } else if (isEqual(data, prevProps.data) === false) {\n        this.series.setData(data, true);\n      }\n\n      if (visible !== prevProps.visible) {\n        this.series.setVisible(visible);\n      }\n\n      var modifiedProps = getModifiedProps(prevProps, rest);\n\n      if (modifiedProps !== false) {\n        this.series.update(modifiedProps);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      attempt(this.series.remove.bind(this.series)); // Series may have already been removed, i.e. when Axis unmounted\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (!this.series) return null;\n      return React.createElement(Provider, {\n        value: this.series\n      }, this.props.children);\n    }\n  }]);\n\n  return Series;\n}(Component);\n\nSeries.defaultProps = {\n  type: 'line',\n  id: uuid,\n  children: null,\n  data: [],\n  requiresAxis: true,\n  visible: true\n};\nexport default Series;","map":null,"metadata":{},"sourceType":"module"}